' palette upload and cycling example 0.1
' NextBuild emook2018
' music youko by Ch41ns4w

paper 0 : ink 7 : BRIGHT 0 : border 0
 : cls

'pause 0 
#include <nextlib.bas>

LoadSD("music.scr",16384,6912,0)

pause 500 : cls : pause 100

LoadSD("music.pt3",51310,4000,0)
#include "IM2player.bas"

NextReg($43,$1)						' ULANext control reg
NextReg($42,255)						' ULANext number of inks : 255 127 63 31 15 7 

NextReg($7,$2)  						' value of index 

NextReg($15,%00001011)  
paper 0 : ink 7 : BRIGHT 0 : border 0
 : cls
' PalUpload(paletter data address eg @Label,Number of colours to upload)
InitSprites(8,@Sprites)
y=16
for xx=0 to 7
	if xx=4
		y=y+16
		x=0
	endif 
	UpdateSprite(240+cast(uinteger,x),y,xx,xx,0,0)
	x=x+16
next xx 
	

PalUpload(@Palette,32,0) ' load entire 64 bytes for 9bit 256x2 colours entries
' lets do a loop to upload the palette data from an offset to make the colours cycle a bit 

dim t as fixed 
dim ex as ubyte
c=0 : p = 0 
'LoadSD("tochi3.scr",16384,6912,0)
do 
	ex=0												' reset exit timer
	' LoadSD(filename,address,length,offset from start)
	'LoadSD("skull.scr",16384,6912,0)
	cls : LoadSD("zxnext2.scr",16384,6912,0) : Blocks()
	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 63 step 2		
			pause 3
			PalUpload(@Palette+128+x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=3							' timer hit 5 so next bit 
	ex=0
	
		cls : LoadSD("emook.scr",16384,6912,0) ': Blocks()
	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 63 step 2		
			pause 3
			PalUpload(@Palette+64+x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=3							' timer hit 5 so next bit 

	ex=0 : cls  : LoadSD("lady.scr",16384,6912,0)

	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 127 step 2		
			pause 3
			PalUpload(@NewPall2+(128)-x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=3							' timer hit 5 so next bit 
		
	ex=0 :cls : LoadSD("alien.scr",16384,6912,0) ': Blocks()
	
	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 63 step 2		
			pause 3
			PalUpload(@NewPall+64+x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=3							' timer hit 5 so next bit 
	
	ex=0 : cls  : LoadSD("tochi3.scr",16384,6912,0)
	
	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 127 step 2		
			pause 3
			PalUpload(@Palette+128-x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=2							' timer hit 5 so next bit 

	ex = 0 : cls  : LoadSD("horse.scr",16384,6912,0)

	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 63 step 2		
			pause 3
			PalUpload(@NewPall+128-x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=3							' timer hit 5 so next bit 

	ex=0: cls : LoadSD("plant1.scr",16384,6912,0)
	
	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 63 step 2		
			pause 3
			PalUpload(@Palette+128-x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=3							' timer hit 5 so next bit 
	ex=0
	 DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 127 step 2		
			pause 3
			PalUpload(@Palette+128-x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=2							' timer hit 5 so next bit 
	
	
	ex=0: cls  : LoadSD("tochi3.scr",16384,6912,0)	
	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 127 step 2		
			pause 3
			PalUpload(@NewPall+x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=3					' timer hit 5 so next bit 
	
	ex=0: 	cls  : LoadSD("vase.scr",16384,6912,0)
	
	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 127 step 2		
			pause 3
			PalUpload(@Palette+128-x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=2							' timer hit 5 so next bit 
	ex=0

		ex=0: cls  : LoadSD("tochi3.scr",16384,6912,0)	
	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 127 step 2		
			pause 3
			PalUpload(@NewPall2+128-x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=3					' timer hit 5 so next bit 

	cls : LoadSD("skull2.scr",16384,6912,0)
	c=0
	'Blocks()
	ex=0												' reset exit timer
	DO 
		' do a loop with a for next loop, read the palette data and upload it from an offset
		For x=0 to 127 step 2		
			pause 3
			PalUpload(@NewPall+x,64,0)
		next x 
		ex=ex+1										' increase the exit timer
	loop until ex=2 						' timer hit 5 so next bit 
' 	
loop 

PAUSE 0

sub Blocks()
	for y =0 to 23 step 2
		for x=0 to 30 step 2			
			if c>17
			c=0
		endif 
			poke 22528+(cast(uinteger,y)*32)+x,c
			poke 22529+(cast(uinteger,y)*32)+x,c
			poke 22528+((cast(uinteger,y+1)*32))+x,c
			poke 22529+((cast(uinteger,y+1)*32))+x,c
			c=c+1	
		next x
		c=c+1
	next y
end sub 

' This is the palette data in 9 bit format
' So DEFB LSB,MSB - the MSB will be either 0 or 1, LSB will be 0-255
' We dont use all these colours but kept so we can set all the colours

' 	DEFB	255,000,255,000,218,000,218,000
' 	DEFB	182,000,182,000,146,000,146,000
' 	DEFB	109,000,109,000,073,000,073,000
' 	DEFB	037,000,037,000,011,000,011,000
' 	DEFB	011,000,011,000,037,000,037,000
'  	DEFB	109,000,109,000,073,000,073,000		; 16 colurs , 32 bytes 
'  	DEFB	182,000,182,000,146,000,146,000
'  	DEFB	218,000,218,000,255,000,255,000		; last colour 
'  	

Palette:
ASM
	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	255,000,255,000,218,000,218,000
 	DEFB	182,000,182,000,146,000,146,000		; 16 colurs , 32 bytes 
 	DEFB	109,000,109,000,073,000,073,000
 	DEFB	037,000,037,000,011,000,011,000


	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	224,000,196,000,168,000,136,000
	DEFB	044,000,012,000,013,000,014,000
	DEFB	043,000,135,000,167,000,199,000
	DEFB	230,000,197,000,229,000,229,000	

	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000	
	DEFB	255,000,255,000,218,000,218,000
	DEFB	182,000,182,000,146,000,146,000
	DEFB	109,000,109,000,073,000,073,000
	DEFB	037,000,037,000,000,000,000,000

end asm 
NewPall:
asm 
	DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
		DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
		DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
		DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
		DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
		DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
		DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
		DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
		DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
		DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
		DEFB	029,000,025,000,021,000,017,000
	DEFB	013,000,009,000,004,000,004,000
	DEFB	040,000,044,000,080,000,084,000
	DEFB	120,000,124,000,124,000,124,000
end asm 

NewPall2:
ASM 
	DEFB	252,000,252,000,216,000,216,000
	DEFB	180,000,180,000,144,000,144,000
	DEFB	108,000,108,000,072,000,072,000
	DEFB	036,000,036,000,000,000,000,000
	
	DEFB	000,000,000,000,036,000,036,000
	DEFB	072,000,072,000,108,000,108,000
	DEFB	144,000,144,000,180,000,180,000
	DEFB	216,000,216,000,252,000,252,000
	
		DEFB	252,000,252,000,216,000,216,000
	DEFB	180,000,180,000,144,000,144,000
	DEFB	108,000,108,000,072,000,072,000
	DEFB	036,000,036,000,000,000,000,000
	
	DEFB	000,000,000,000,036,000,036,000
	DEFB	072,000,072,000,108,000,108,000
	DEFB	144,000,144,000,180,000,180,000
	DEFB	216,000,216,000,252,000,252,000
		DEFB	252,000,252,000,216,000,216,000
	DEFB	180,000,180,000,144,000,144,000
	DEFB	108,000,108,000,072,000,072,000
	DEFB	036,000,036,000,000,000,000,000
	
	DEFB	000,000,000,000,036,000,036,000
	DEFB	072,000,072,000,108,000,108,000
	DEFB	144,000,144,000,180,000,180,000
	DEFB	216,000,216,000,252,000,252,000
		DEFB	252,000,252,000,216,000,216,000
	DEFB	180,000,180,000,144,000,144,000
	DEFB	108,000,108,000,072,000,072,000
	DEFB	036,000,036,000,000,000,000,000
	
	DEFB	000,000,000,000,036,000,036,000
	DEFB	072,000,072,000,108,000,108,000
	DEFB	144,000,144,000,180,000,180,000
	DEFB	216,000,216,000,252,000,252,000
end asm   

Sprites:
asm 

Sprite1:
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $24, $25, $24, $24, $24, $24, $24, $24, $24, $25, $25, $24, $24, $25, $24;
	db  $E3, $25, $25, $24, $24, $24, $24, $24, $24, $24, $25, $25, $24, $24, $25, $49;
	db  $24, $25, $64, $E0, $E0, $E0, $E0, $E0, $E0, $E0, $E0, $80, $E0, $E0, $E0, $64;
	db  $E3, $24, $49, $49, $49, $25, $49, $60, $C0, $C0, $C0, $49, $A0, $C0, $C0, $A0;
	db  $E3, $E3, $E3, $E3, $25, $49, $40, $C0, $A0, $C0, $65, $25, $64, $C0, $A0, $E0;
	db  $E3, $E3, $E3, $24, $49, $24, $C0, $C0, $C0, $A4, $49, $25, $25, $C0, $A0, $C0;
	db  $E3, $E3, $24, $49, $25, $A0, $C0, $C0, $C0, $49, $E3, $24, $25, $80, $C0, $A0;
	db  $E3, $E3, $25, $25, $60, $C0, $C0, $C0, $45, $24, $E3, $E3, $25, $25, $C0, $A0;
	db  $E3, $25, $49, $40, $C0, $A0, $C0, $65, $25, $E3, $E3, $25, $25, $40, $C0, $A0;
	db  $24, $49, $24, $C0, $C0, $C0, $A4, $49, $E3, $E3, $25, $49, $24, $C0, $C0, $C0;
	db  $49, $25, $A0, $C0, $C0, $C0, $49, $E3, $E3, $24, $49, $24, $A0, $C0, $C0, $A0;
	db  $25, $60, $C0, $C0, $C0, $45, $25, $24, $24, $25, $25, $A0, $C0, $C0, $A4, $25;
	db  $44, $C0, $A0, $C0, $64, $24, $24, $24, $24, $24, $80, $C0, $C0, $C0, $49, $49;



Sprite2:
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $24, $25, $25, $24, $25, $25, $25, $24, $24, $25, $24, $E3, $24, $25, $24;
	db  $24, $25, $25, $24, $24, $25, $25, $25, $24, $24, $25, $49, $24, $25, $25, $24;
	db  $49, $49, $40, $C0, $E0, $C0, $65, $A0, $E0, $E0, $E0, $84, $49, $49, $60, $E0;
	db  $25, $24, $C0, $C0, $C0, $84, $25, $A0, $C0, $A0, $C0, $C0, $24, $49, $80, $C0;
	db  $24, $A0, $C0, $C0, $A4, $25, $24, $C0, $A0, $C0, $A0, $E0, $45, $25, $A0, $C0;
	db  $C0, $C0, $C0, $C4, $49, $25, $44, $E0, $C0, $A0, $C0, $C0, $A4, $24, $C0, $A0;
	db  $A0, $C0, $C0, $49, $49, $49, $60, $C0, $C0, $80, $A0, $C0, $C0, $24, $C0, $A0;
	db  $A0, $C0, $65, $49, $25, $49, $80, $C0, $C0, $85, $80, $C0, $C0, $60, $C0, $C0;
	db  $A0, $C0, $65, $25, $25, $25, $A0, $C0, $E0, $69, $44, $E0, $C0, $C0, $C0, $C0;
	db  $A0, $C0, $A4, $49, $25, $24, $C0, $A0, $C0, $24, $25, $C0, $A0, $A0, $A0, $C0;
	db  $C0, $A0, $C0, $45, $25, $24, $C0, $A0, $C0, $25, $49, $80, $C0, $80, $A0, $E0;
	db  $C0, $A0, $C0, $A4, $25, $44, $C0, $C0, $A4, $49, $25, $64, $C0, $A0, $A0, $C0;
	db  $80, $C0, $A0, $C0, $49, $60, $C0, $C0, $84, $49, $25, $25, $C0, $A0, $C0, $C0;



Sprite3:
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $F0;
	db  $25, $25, $25, $25, $24, $24, $24, $24, $24, $24, $25, $25, $25, $24, $25, $D0;
	db  $25, $25, $25, $24, $24, $24, $24, $24, $24, $24, $25, $25, $24, $24, $24, $6C;
	db  $E0, $A4, $24, $C0, $E0, $E0, $E0, $E0, $E0, $E0, $E0, $45, $C0, $C0, $C0, $84;
	db  $C0, $89, $24, $C0, $A0, $C0, $25, $49, $49, $49, $49, $49, $80, $C0, $A0, $A0;
	db  $E0, $6D, $44, $C0, $A0, $C0, $25, $E3, $E3, $E3, $E3, $25, $45, $C0, $A0, $A0;
	db  $C0, $49, $60, $C0, $C0, $A4, $25, $24, $25, $25, $24, $24, $49, $80, $A0, $A0;
	db  $C0, $25, $80, $C0, $C0, $80, $24, $24, $24, $25, $49, $E3, $25, $44, $C0, $A4;
	db  $A4, $25, $A0, $C0, $C0, $E0, $E0, $E0, $E0, $C0, $49, $E3, $49, $25, $A0, $A0;
	db  $A5, $24, $C0, $A0, $E0, $49, $49, $49, $49, $49, $25, $24, $49, $24, $C0, $A0;
	db  $89, $44, $E0, $A0, $C0, $25, $E3, $E3, $E3, $E3, $24, $49, $24, $A0, $C0, $A0;
	db  $69, $64, $C0, $C0, $C0, $49, $E3, $E3, $E3, $24, $49, $25, $80, $C0, $C0, $A0;
	db  $49, $80, $C0, $C0, $A4, $25, $24, $24, $25, $49, $25, $60, $C0, $C0, $C0, $25;
	db  $25, $A0, $C0, $C0, $80, $24, $24, $24, $25, $25, $60, $C0, $C0, $C0, $45, $49;



Sprite4:
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $84, $84;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8, $EC, $EC, $88;
	db  $F0, $F0, $F0, $F0, $F0, $F0, $A8, $F0, $F0, $F0, $44, $E3, $AC, $F0, $A8, $00;
	db  $F4, $D0, $F4, $D0, $D4, $F4, $24, $AC, $F4, $D0, $24, $24, $F4, $D0, $24, $24;
	db  $6C, $D4, $F8, $90, $68, $6C, $24, $6C, $F8, $F8, $24, $B0, $F8, $48, $24, $24;
	db  $25, $FC, $FC, $8C, $80, $80, $80, $A8, $FC, $FC, $88, $FC, $D4, $80, $A0, $A0;
	db  $49, $FC, $FC, $60, $60, $64, $24, $24, $FC, $FC, $F8, $FC, $64, $24, $25, $25;
	db  $8C, $F8, $F8, $60, $60, $25, $E3, $24, $D4, $F8, $F8, $B0, $44, $24, $E3, $E3;
	db  $D0, $F4, $D0, $80, $24, $24, $E3, $44, $D0, $F4, $F4, $80, $44, $E3, $E3, $E3;
	db  $F0, $F0, $F0, $68, $25, $E3, $E3, $68, $F0, $F0, $F0, $A4, $24, $E3, $E3, $E3;
	db  $80, $A0, $64, $25, $E3, $E3, $24, $25, $40, $A0, $80, $80, $25, $E3, $E3, $E3;
	db  $80, $A0, $64, $25, $E3, $E3, $24, $49, $60, $A0, $A0, $80, $49, $E3, $E3, $E3;
	db  $A0, $A0, $A0, $25, $24, $E3, $25, $25, $80, $A0, $A0, $84, $49, $E3, $E3, $E3;
	db  $C0, $A0, $C0, $64, $49, $E3, $25, $25, $A0, $A0, $C0, $65, $24, $E3, $E3, $E3;
	db  $A0, $C0, $A0, $A0, $49, $E3, $25, $24, $C0, $A0, $C0, $49, $E3, $E3, $E3, $E3;
	db  $64, $C0, $A0, $C0, $65, $49, $25, $44, $E0, $A0, $C0, $25, $E3, $E3, $E3, $E3;



Sprite5:
	db  $A4, $E0, $E0, $E0, $E0, $E0, $E0, $E0, $E0, $C0, $E0, $E0, $C0, $45, $24, $25;
	db  $49, $49, $49, $49, $49, $49, $49, $49, $49, $49, $49, $49, $49, $25, $E3, $24;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;



Sprite6:
	db  $45, $C0, $E0, $E0, $84, $A4, $E0, $E0, $65, $24, $24, $49, $A4, $E0, $E0, $A4;
	db  $49, $49, $49, $49, $49, $49, $49, $49, $49, $E3, $E3, $25, $49, $49, $49, $49;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;



Sprite7:
	db  $25, $C0, $E0, $E0, $E0, $E0, $E0, $E0, $E0, $65, $C0, $E0, $E0, $65, $25, $25;
	db  $49, $25, $49, $49, $49, $49, $49, $49, $49, $49, $49, $49, $49, $49, $E3, $24;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;



Sprite8:
	db  $25, $C0, $E0, $E0, $A4, $49, $25, $64, $E0, $E0, $C4, $49, $E3, $E3, $E3, $E3;
	db  $49, $25, $49, $49, $49, $24, $24, $49, $49, $49, $49, $24, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;



Sprite1a:
	db  $E3, $E3, $E3, $E3, $96, $BA, $BB, $BB, $BB, $BB, $BB, $B6, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $B6, $C9, $C0, $A0, $A0, $A0, $A0, $BB, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $B6, $C0, $A0, $A0, $A0, $A0, $A0, $BA, $B6, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $96, $A0, $A0, $A0, $A0, $A0, $A0, $A0, $B6, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $B6, $92, $A0, $A0, $A0, $C5, $A0, $A0, $A0, $96, $B6, $E3, $E3;
	db  $E3, $E3, $E3, $92, $A9, $A0, $A0, $A0, $84, $A0, $A0, $A0, $A0, $B6, $E3, $96;
	db  $E3, $E3, $E3, $92, $A0, $A0, $A0, $A0, $92, $8D, $A0, $A0, $A0, $6D, $DB, $92;
	db  $E3, $E3, $E3, $92, $A0, $A0, $A0, $A0, $92, $92, $C0, $A0, $A0, $A0, $92, $92;
	db  $E3, $E3, $B6, $92, $A0, $A0, $A0, $C4, $92, $92, $92, $A0, $A0, $A0, $85, $92;
	db  $E3, $E3, $92, $A5, $A0, $A0, $A0, $C5, $92, $6D, $92, $A0, $A0, $A0, $A0, $92;
	db  $E3, $E3, $92, $A0, $A0, $A0, $A0, $80, $92, $E3, $DB, $92, $A0, $A0, $A0, $C4;
	db  $E3, $E3, $92, $A0, $A0, $A0, $A0, $8D, $96, $E3, $E3, $92, $80, $A0, $A0, $A0;
	db  $E3, $96, $91, $A0, $A0, $A0, $A0, $92, $96, $E3, $E3, $6D, $92, $A0, $A0, $A0;
	db  $E3, $B6, $C9, $A0, $A0, $A0, $A0, $92, $E3, $E3, $E3, $E3, $DA, $84, $A0, $A0;
	db  $E3, $92, $92, $92, $92, $92, $92, $B6, $E3, $E3, $E3, $E3, $E3, $B2, $B2, $B2;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;



Sprite2a:
	db  $E3, $96, $96, $96, $96, $92, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $96, $BA, $A0, $A0, $A0, $E9, $B6, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $B6, $8D, $A0, $A0, $A0, $8E, $96, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $B6, $C4, $A0, $A0, $A0, $6D, $6D, $6D, $6D, $6D, $6D, $6D, $6D, $6D, $B6, $E3;
	db  $96, $A0, $A0, $D0, $D0, $D0, $D0, $D0, $D0, $D0, $D0, $D0, $F4, $F4, $BB, $E3;
	db  $92, $A0, $A9, $D0, $D0, $D0, $D0, $D0, $D0, $D0, $F0, $F0, $F0, $D4, $97, $E3;
	db  $6D, $A0, $A0, $A0, $69, $D0, $D0, $64, $12, $12, $25, $12, $12, $97, $E3, $E3;
	db  $C4, $A0, $A0, $A0, $64, $D0, $D0, $64, $12, $16, $09, $16, $97, $E3, $E3, $E3;
	db  $A0, $A0, $A0, $A0, $D1, $D0, $F0, $12, $12, $09, $12, $12, $97, $E3, $E3, $E3;
	db  $A0, $A0, $A0, $C4, $D1, $D0, $D1, $12, $12, $09, $12, $97, $E3, $E3, $E3, $E3;
	db  $A0, $A0, $A0, $84, $D0, $D0, $64, $12, $09, $12, $B6, $E3, $E3, $E3, $E3, $E3;
	db  $A0, $A0, $A0, $64, $D0, $D0, $12, $12, $12, $32, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $A0, $A0, $A0, $AC, $D0, $D0, $32, $12, $12, $B6, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $A0, $A0, $A0, $B2, $B6, $B6, $B6, $B6, $B6, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $B2, $B2, $B2, $BB, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;

end asm 
        