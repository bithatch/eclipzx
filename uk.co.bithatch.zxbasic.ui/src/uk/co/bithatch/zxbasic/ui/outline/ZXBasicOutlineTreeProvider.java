/*
 * generated by Xtext 2.35.0
 */
package uk.co.bithatch.zxbasic.ui.outline;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;

import uk.co.bithatch.zxbasic.basic.AbstractDeclaration;
import uk.co.bithatch.zxbasic.basic.AsmBlock;
import uk.co.bithatch.zxbasic.basic.CodeBlock;
import uk.co.bithatch.zxbasic.basic.CommentStmt;
import uk.co.bithatch.zxbasic.basic.ConstStmt;
import uk.co.bithatch.zxbasic.basic.DataStmt;
import uk.co.bithatch.zxbasic.basic.DimStmt;
import uk.co.bithatch.zxbasic.basic.FunctionBlock;
import uk.co.bithatch.zxbasic.basic.Group;
import uk.co.bithatch.zxbasic.basic.LetStmt;
import uk.co.bithatch.zxbasic.basic.PPDirective;
import uk.co.bithatch.zxbasic.basic.Program;
import uk.co.bithatch.zxbasic.basic.Statement;
import uk.co.bithatch.zxbasic.basic.SubBlock;
import uk.co.bithatch.zxbasic.scoping.ScopingUtils;

public class ZXBasicOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	@Override
	protected void createNode(IOutlineNode parent, EObject modelElement) {
			if (isShowWholeTree()) {
				super.createNode(parent, modelElement);
			} else {
				if (modelElement instanceof Group grp && ScopingUtils.hasLabel(grp)) {
					grp.eAdapters().add(new  LabelAdapter(grp.getName()));
					super.createNode(parent, grp);
				}
				
				if (!isHiddenLeaf(modelElement)) {
					super.createNode(parent, modelElement);
				}
			}
	}

	protected boolean isHiddenLeaf(EObject obj) {
		return _isLeaf(obj) && !(obj instanceof LetStmt || obj instanceof DimStmt || obj instanceof DataStmt
				|| obj instanceof ConstStmt || obj instanceof PPDirective || obj instanceof AsmBlock || obj instanceof CommentStmt);
	}

	@Override
	public void createChildren(IOutlineNode parent, EObject modelElement) {
		if (isShowWholeTree()) {
			super.createChildren(parent, modelElement);
		} else {

			if (modelElement instanceof Program prg) {
				var cblock = prg.getProgram();
				for (var g : cblock.getGroups()) {

					if (ScopingUtils.hasLabel(g)) {
						super.createChildren(parent, g);

						if (g.getStatements().isEmpty() || g.getBlock() == null) {
							/* Label only */
							continue;
						}
					}

					if (g instanceof PPDirective ppd) {
						super.createChildren(parent, ppd);
					} else {
						for (var c : g.getStatements()) {
							super.createChildren(parent, c);
						}
						if (g.getBlock() != null) {
							for (var c : g.getBlock().getGroups()) {
								super.createChildren(parent, c);
							}
						}
					}
				}
			} else if (modelElement instanceof FunctionBlock fblock) {

				for (var c : fblock.getBlock().getGroups()) {
					super.createChildren(parent, c);
				}
			} else if (modelElement instanceof SubBlock sblock) {

				for (var c : sblock.getBlock().getGroups()) {
					super.createChildren(parent, c);
				}
			} else {
				super.createChildren(parent, modelElement);
			}
		}
	}

	@Override
	protected boolean _isLeaf(final EObject modelElement) {
		if (isShowWholeTree()) {
			return super._isLeaf(modelElement);
		} else {
			if (modelElement instanceof Program || modelElement instanceof CodeBlock) {
				return false;
			} else if (modelElement instanceof Statement && !(modelElement instanceof SubBlock)
					&& !(modelElement instanceof FunctionBlock)) {
				return true;
			} else if ((modelElement instanceof FunctionBlock fb && hasMembers(fb.getBlock()))
					|| (modelElement instanceof SubBlock sb && hasMembers(sb.getBlock()))) {
				return false;
			} else {
				return true;
			}
		}
	}

	protected boolean isShowWholeTree() {
		return Boolean.getBoolean("eclipzx.showEntireParseTree");
	}

	private boolean hasMembers(CodeBlock fb) {
		if (fb != null) {
			for (var group : fb.getGroups()) {
				for (var stmt : group.getStatements()) {
					if (stmt instanceof AbstractDeclaration || stmt instanceof LetStmt) {
						return true;
					}
				}
				if (hasMembers(group.getBlock())) {
					return true;
				}
			}
		}
		return false;
	}
}
