/*
 * generated by Xtext 2.39.0
 */
package uk.co.bithatch.zxbasic;

import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.parser.antlr.ISyntaxErrorMessageProvider;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.impl.ImportUriResolver;

import uk.co.bithatch.zxbasic.generator.BasicGenerator;
import uk.co.bithatch.zxbasic.scoping.ZXBasicGlobalScopeProvider;
import uk.co.bithatch.zxbasic.scoping.ZXBasicQualifiedNameConverter;
import uk.co.bithatch.zxbasic.scoping.ZXBasicQualifiedNameProvider;
import uk.co.bithatch.zxbasic.scoping.ZXBasicResourceDescriptionStrategy;
import uk.co.bithatch.zxbasic.scoping.ZXBasicUriResolver;
import uk.co.bithatch.zxbasicconverters.ZXBasicStringConverters;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class BasicRuntimeModule extends AbstractBasicRuntimeModule {
	
	// in your *Runtime* module (not UI)
	@Override
	public Class<? extends org.eclipse.xtext.conversion.IValueConverterService> bindIValueConverterService() {
	    return ZXBasicStringConverters.class;
	}
    
	@Override
	public Class<? extends org.eclipse.xtext.naming.IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return ZXBasicQualifiedNameProvider.class;
	}

	public Class<? extends IQualifiedNameConverter> bindIQualifiedNameConverter() {
	    return ZXBasicQualifiedNameConverter.class;
	}

	@Override 
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return ZXBasicGlobalScopeProvider.class;
	}
	
	public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		 return ZXBasicResourceDescriptionStrategy.class;
	}

	public Class<? extends ImportUriResolver> bindImportUriResolver() {
		return ZXBasicUriResolver.class;
	}

	@Override
	public Class<? extends IGenerator2> bindIGenerator2() {
	    return BasicGenerator.class;
	}
	
	public Class<? extends ISyntaxErrorMessageProvider> bindISyntaxErrorMessageProvider() {
	    return ZxbasicSyntaxErrorMessageProvider.class;
	}

}
