/*
 * generated by Xtext 2.39.0
 */
package uk.co.bithatch.zxbasic.validation;

import java.util.HashSet;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;

import uk.co.bithatch.zxbasic.basic.BasicPackage;
import uk.co.bithatch.zxbasic.basic.Group;
import uk.co.bithatch.zxbasic.basic.Program;
import uk.co.bithatch.zxbasic.scoping.ScopingUtils;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class BasicValidator extends AbstractBasicValidator {

//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					BasicPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}

//	@Check
//	public void checkGotoLabelExists(Goto stmt) {
//		if (LineUtils.hasTargetNumber(stmt) && LabelLineMap.get().getTarget(stmt) == null) {
//			error("Label '" + stmt.getTargetLabel() + "' not found", BasicPackage.Literals.GOTO__TARGET_LABEL);
//		}
//	}
//
//	@Check
//	public void checkGotoLineExists(Goto stmt) {
//		if (LineUtils.hasTargetNumber(stmt) && LabelLineMap.get().getTarget(stmt) == null) {
//			error("GOTO line number '" + stmt.getTargetNumber() + "' not found",
//					BasicPackage.Literals.GOTO__TARGET_NUMBER);
//		}
//	}

	@Check
	public void checkForDuplicateLabels(Program program) {
		var seenNames = new HashSet<String>();

		for (var line : program.getProgram().getGroups()) {
			if (line instanceof Group bline && ScopingUtils.hasNumberOrLabel(bline)) {
				var name = ScopingUtils.numberOrLabel(bline);
				if (!seenNames.add(name)) {
					warning("Duplicate label: " + name, line, BasicPackage.Literals.GROUP__LINE);
				}
				
//				if (bline.getLabel() != null) {
//					if (!seenNames.add(bline.getLabel())) {
//						warning("Duplicate label: " + bline.getLabel(), line, BasicPackage.Literals.BASIC_LINE__LABEL);
//					}
//				} else if (bline.getNumber() != null) {
//					String numKey = String.valueOf(bline.getNumber());
//					if (!seenNames.add(numKey)) {
//						warning("Duplicate line number: " + bline.getNumber(), line,
//								BasicPackage.Literals.BASIC_LINE__NUMBER);
//					}
//				}
			}
		}
	}

	@Override
	public void acceptError(String message, EObject object, int offset, int length, String code, String... issueData) {
		// TODO Auto-generated method stub
		super.acceptError(message, object, offset, length, code, issueData);
		System.out.println("AE: " + message);
	}

	@Override
	protected void addIssue(String message, EObject source, int offset, int length, String issueCode,
			String... issueData) {
		System.out.println(message + " : " + issueCode);
		super.addIssue(message, source, offset, length, issueCode, issueData);
	}

//	    @Override
//	    public boolean shouldCheck(Resource resource) {
//	        // optionally skip validating certain resources
//	        return true;
//	    }
//	    
//	    @Check
//	    public void checkUnknownReference(EObject element) {
//	        if (element instanceof PPInclude) {
//	            // This is a known macro, skip error reporting
//	            return;
//	        }
//
//	        // Proceed with normal validation
//	        if (!isResolved(element)) {
//	            error("Unresolved reference: " + element.getName(), MyPackage.Literals.MY_ELEMENT__NAME, MY_UNRESOLVED_REFERENCE_CODE);
//	        }
//	    }
}
