grammar uk.co.bithatch.zxbasic.Asm with org.eclipse.xtext.common.Terminals

generate asm "http://bithatch.co.uk/Asm"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AsmProgram:
    lines+=AsmLine*;

//AsmLine:
//    (label=ID ':')? mnemonic=ID (operands+=ID | operands+=STRING)*;
    
    // ─────────────── ASM ───────────────

AsmLine:
    AsmLabelOnlyLine | AsmStatementLine;
    

AsmLabelOnlyLine:
    {LabelOnlyLine}
    label=ID ':';

AsmStatementLine:
    {AsmStatementLine}
    (label=ID ':')?
    statements+=AsmStatement (':' statements+=AsmStatement)*;
    
AsmStatement:
    AsmNextReg | AsmEIStatement | AsmDIStatement | AsmDBStatement | AsmComment | AsmPopStatement;
    
AsmComment:
    {AsmComment} ';' ANY_OTHER
;

AsmDBStatement:
    {DB} 'DB' data+=AsmExpr (',' data+=AsmExpr)*
;

AsmEIStatement:
    {EI} 'EI'
;

AsmDIStatement:
    {DI} 'DI'
;
AsmLdStatement:
    //{Ld} 'LD' name=AsmRegister value=AsmRegister
    {Ld} 'LD' name=ID value=ID
;
AsmPopStatement:
    {Pop} 'POP' register=ID
    //{Pop} 'POP' register=AsmRegister
;

AsmRegister:
    'B' | 'D' | 'H'| 'C' | 'E' | 'L' | 'AF' |'BC' | 'DE' | 'HL' | 'SP' | 'PC' | 'IX' | 'IY' |'I' |'R'|'AF' | 'BC\'' | 'DE\'' 'HL\''
;

AsmNextReg:
    'NEXTREG'  name=IntegralLiteral ',' value=IntegralLiteral; 
    
    
// ─────────────── EXPRESSIONS ───────────────
AsmExpr:
    IntegralLiteral | StringLiteral
;
    
// ─────────────── MODEL ELEMENTS ───────────────

IntegralLiteral:
    value=INT | litvalue=HEX_LITERAL | litvalue=BIN_LITERAL;
    
DecimalLiteral:
    value=FLOAT;

StringLiteral:
    value=STRING;


// ─────────────── TERMINALS ───────────────

terminal HEX_LITERAL:
    ('$' ('0'..'9' | 'a'..'f' | 'A'..'F')+)
  | (('0'..'9' | 'a'..'f' | 'A'..'F')+ ('h' | 'H'));

terminal BIN_LITERAL:
    ('%' ('0' | '1')+)
  | (('0' | '1')+ ('b' | 'B'));

@Override
terminal SL_COMMENT     : ';' !('\n'|'\r')*;

@Override
terminal ML_COMMENT: "/'" -> "'/";

@Override
terminal STRING: '"' ( '\\' . | !('\\' | '"') )* '"';

terminal FLOAT returns ecore::EFloat:  ('0'..'9')* '.' ('0'..'9')* (('e' | 'E') ('+' | '-')? ('0'..'9')+)?;

@Override
terminal INT returns ecore::EInt: ('0'..'9')+;

@Override
terminal ID: ('@')? ('A'..'Z' | 'a'..'z' | '0'..'9' | '_')+ ('$')?;
             
@Override
terminal WS:
    (' ' | '\t' | '\\' '\r'? '\n')+;


@Override
terminal ANY_OTHER: . ;

